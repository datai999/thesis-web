{"version":3,"sources":["reusable/DocsLink.js","views/notifications/toaster/Toaster.js"],"names":["DocsLink","props","name","text","rest","href","className","rel","target","React","memo","Toaster","useState","position","autohide","toasts","setToasts","setPosition","setAutohide","autohideValue","setAutohideValue","closeButton","setCloseButton","fade","setFade","toasters","reduce","toast","push","sm","lg","variant","id","checked","onChange","e","custom","htmlFor","type","value","Number","map","i","color","onClick","Object","keys","toasterKey","key","show"],"mappings":"sRAGMA,EAAW,SAAAC,GACf,IACEC,EAGED,EAHFC,KACAC,EAEEF,EAFFE,KACGC,EAHL,YAIIH,EAJJ,GAMMI,EAAOH,EAAI,kDAA8CA,GAASD,EAAMI,KAE9E,OACE,qBAAKC,UAAU,sBAAf,SACE,cAAC,KAAD,2BACMF,GADN,IAEEC,KAAMA,EACNE,IAAI,sBACJC,OAAO,SACPF,UAAU,qBALZ,SAOE,uBAAOA,UAAU,aAAjB,SAAgCH,GAAQ,eAMjCM,MAAMC,KAAKV,I,8FC6JXW,UAnKC,WAEd,IAYA,EAA4BC,mBAAS,CACnC,CAAEC,SAAU,UACZ,CAAEA,SAAU,UACZ,CAAEA,SAAU,YAAaC,SAAU,OAHrC,mBAAOC,EAAP,KAAeC,EAAf,KAMA,EAAgCJ,mBAAS,aAAzC,mBAAOC,EAAP,KAAiBI,EAAjB,KACA,EAAgCL,oBAAS,GAAzC,mBAAOE,EAAP,KAAiBI,EAAjB,KACA,EAA0CN,mBAAS,KAAnD,mBAAOO,EAAP,KAAsBC,EAAtB,KACA,EAAsCR,oBAAS,GAA/C,mBAAOS,EAAP,KAAoBC,EAApB,KACA,EAAwBV,oBAAS,GAAjC,mBAAOW,EAAP,KAAaC,EAAb,KAUMC,EACGV,EAAOW,QAAO,SAACD,EAAUE,GAG9B,OAFAF,EAASE,EAAMd,UAAYY,EAASE,EAAMd,WAAa,GACvDY,EAASE,EAAMd,UAAUe,KAAKD,GACvBF,IACN,IAIL,OACE,eAAC,IAAD,WACE,eAAC,IAAD,qBAEE,cAAC,IAAD,CAAUvB,KAAK,cAEjB,cAAC,IAAD,UACE,cAAC,IAAD,UACE,eAAC,KAAD,WACE,cAAC,IAAD,CAAM2B,GAAG,KAAKC,GAAG,IAAjB,SACE,eAAC,IAAD,WACE,iEAEA,eAAC,IAAD,CAAYC,QAAQ,kBAAkBzB,UAAU,YAAhD,UACE,cAAC,IAAD,CACE0B,GAAG,WACHC,QAASnB,EACToB,SAAU,SAAAC,GAAOjB,EAAYiB,EAAE3B,OAAOyB,UACtCG,QAAM,IAER,cAAC,IAAD,CAAQL,QAAQ,kBAAkBM,QAAQ,WAA1C,sCAKAvB,GACA,eAAC,IAAD,CAAYR,UAAU,OAAtB,UACE,cAAC,IAAD,CAAQ+B,QAAQ,SAAhB,8BACA,cAAC,IAAD,CACEC,KAAK,SACLC,MAAOpB,EACPe,SAAU,SAAAC,GACRf,EAAiBoB,OAAOL,EAAE3B,OAAO+B,cAMzC,eAAC,IAAD,CAAYjC,UAAU,OAAtB,UACE,cAAC,IAAD,CAAQ+B,QAAQ,SAAhB,sBACA,wBACE/B,UAAU,eACViC,MAAO1B,EACPqB,SAAU,SAAAC,GAAMlB,EAAYkB,EAAE3B,OAAO+B,QAHvC,SAjFE,CAChB,SACA,WACA,aACA,YACA,WACA,cACA,gBACA,eACA,eA8E4BE,KAAI,SAAC5B,EAAU6B,GAAX,OACZ,iCAAiB7B,GAAJ6B,WAMrB,eAAC,IAAD,CAAYX,QAAQ,kBAAkBzB,UAAU,OAAhD,UACE,cAAC,IAAD,CACE0B,GAAG,OACHC,QAASV,EACTW,SAAU,SAAAC,GAAOX,EAAQW,EAAE3B,OAAOyB,UAClCG,QAAM,IAER,cAAC,IAAD,CAAQL,QAAQ,kBAAkBM,QAAQ,OAA1C,qBAGF,eAAC,IAAD,CAAYN,QAAQ,kBAAkBzB,UAAU,OAAhD,UACE,cAAC,IAAD,CACE0B,GAAG,QACHI,QAAM,EACNH,QAASZ,EACTa,SAAU,SAAAC,GAAMb,EAAea,EAAE3B,OAAOyB,YAE1C,cAAC,IAAD,CAAQF,QAAQ,kBAAkBM,QAAQ,QAA1C,4BAKF,cAAC,IAAD,CACE/B,UAAU,YACVqC,MAAM,UACNC,QA/FC,WACf5B,EAAU,GAAD,mBACJD,GADI,CAEP,CAAEF,WAAUC,SAAUA,GAAYK,EAAeE,cAAaE,YAyFpD,4BAUJ,cAAC,IAAD,CAAMM,GAAG,KAAKC,GAAG,IAAjB,SACGe,OAAOC,KAAKrB,GAAUgB,KAAI,SAACM,GAAD,OACzB,cAAC,KAAD,CACElC,SAAUkC,EADZ,SAKItB,EAASsB,GAAYN,KAAI,SAACd,EAAOqB,GACjC,OACE,eAAC,KAAD,CAEEC,MAAM,EACNnC,SAAUa,EAAMb,SAChBS,KAAMI,EAAMJ,KAJd,UAME,cAAC,KAAD,CAAcF,YAAaM,EAAMN,YAAjC,yBAGA,cAAC,KAAD,uCACyB0B,EADzB,sCACiEC,EAAM,EADvE,SARK,QAAUA,OANhB,UAAYD","file":"static/js/48.7176d22f.chunk.js","sourcesContent":["import React from 'react'\r\nimport { CLink } from '@coreui/react'\r\n\r\nconst DocsLink = props => {\r\n  const {\r\n    name,\r\n    text,\r\n    ...rest\r\n  } = props\r\n\r\n  const href = name ? `https://coreui.io/react/docs/components/${name}` : props.href\r\n\r\n  return (\r\n    <div className=\"card-header-actions\">\r\n      <CLink \r\n        {...rest}\r\n        href={href}\r\n        rel=\"noreferrer noopener\" \r\n        target=\"_blank\" \r\n        className=\"card-header-action\"  \r\n      >\r\n        <small className=\"text-muted\">{ text || 'docs' }</small>\r\n      </CLink>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default React.memo(DocsLink)","import React, { useState } from 'react'\r\nimport {\r\n  CCard,\r\n  CCardHeader,\r\n  CCardBody,\r\n  CToast,\r\n  CToastBody,\r\n  CToastHeader,\r\n  CToaster,\r\n  CForm,\r\n  CInput,\r\n  CInputCheckbox,\r\n  CButton,\r\n  CContainer,\r\n  CRow,\r\n  CCol,\r\n  CFormGroup,\r\n  CLabel\r\n} from '@coreui/react'\r\nimport { DocsLink } from 'src/reusable'\r\n\r\nconst Toaster = () => {\r\n\r\n  const positions = [\r\n    'static',\r\n    'top-left',\r\n    'top-center',\r\n    'top-right',\r\n    'top-full',\r\n    'bottom-left',\r\n    'bottom-center',\r\n    'bottom-right',\r\n    'bottom-full'\r\n  ]\r\n\r\n  const [toasts, setToasts] = useState([\r\n    { position: 'static'},\r\n    { position: 'static'},\r\n    { position: 'top-right', autohide: 3000 }\r\n  ])\r\n\r\n  const [position, setPosition] = useState('top-right')\r\n  const [autohide, setAutohide] = useState(true)\r\n  const [autohideValue, setAutohideValue] = useState(5000)\r\n  const [closeButton, setCloseButton] = useState(true)\r\n  const [fade, setFade] = useState(true)\r\n\r\n  const addToast = () => {\r\n    setToasts([\r\n      ...toasts, \r\n      { position, autohide: autohide && autohideValue, closeButton, fade }\r\n    ])\r\n  }\r\n\r\n\r\n  const toasters = (()=>{\r\n    return toasts.reduce((toasters, toast) => {\r\n      toasters[toast.position] = toasters[toast.position] || []\r\n      toasters[toast.position].push(toast)\r\n      return toasters\r\n    }, {})\r\n  })()\r\n\r\n\r\n  return (\r\n    <CCard>\r\n      <CCardHeader>\r\n        Toasts.\r\n        <DocsLink name=\"-Toast\"/>\r\n      </CCardHeader>\r\n      <CCardBody>\r\n        <CContainer>\r\n          <CRow>\r\n            <CCol sm=\"12\" lg=\"6\">\r\n              <CForm>\r\n                <h5>Add toast with following props:</h5>\r\n\r\n                <CFormGroup variant=\"custom-checkbox\" className=\"my-2 mt-4\">\r\n                  <CInputCheckbox\r\n                    id=\"autohide\"\r\n                    checked={autohide}\r\n                    onChange={e => { setAutohide(e.target.checked) }}\r\n                    custom\r\n                  />\r\n                  <CLabel variant=\"custom-checkbox\" htmlFor=\"autohide\">\r\n                    Autohide of the toast\r\n                  </CLabel>\r\n                </CFormGroup>\r\n                {\r\n                  autohide &&\r\n                  <CFormGroup className=\"my-2\">\r\n                    <CLabel htmlFor=\"ccyear\">Time to autohide</CLabel>\r\n                    <CInput\r\n                      type=\"number\"\r\n                      value={autohideValue}\r\n                      onChange={e => {\r\n                        setAutohideValue(Number(e.target.value))\r\n                      }}\r\n                    />\r\n                  </CFormGroup>\r\n                }\r\n\r\n                <CFormGroup className=\"my-2\">\r\n                  <CLabel htmlFor=\"ccyear\">Position</CLabel>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    value={position}\r\n                    onChange={e => {setPosition(e.target.value)}}\r\n                  >\r\n                    {\r\n                      positions.map((position, i)=>(\r\n                        <option key={i}>{position}</option>\r\n                      ))\r\n                    }\r\n                  </select>\r\n                </CFormGroup>\r\n\r\n                <CFormGroup variant=\"custom-checkbox\" className=\"my-2\">\r\n                  <CInputCheckbox\r\n                    id=\"fade\"\r\n                    checked={fade}\r\n                    onChange={e => { setFade(e.target.checked) }}\r\n                    custom\r\n                  />\r\n                  <CLabel variant=\"custom-checkbox\" htmlFor=\"fade\">fade</CLabel>\r\n                </CFormGroup>\r\n\r\n                <CFormGroup variant=\"custom-checkbox\" className=\"my-2\">\r\n                  <CInputCheckbox\r\n                    id=\"close\"\r\n                    custom\r\n                    checked={closeButton}\r\n                    onChange={e=> { setCloseButton(e.target.checked) }}\r\n                  />\r\n                  <CLabel variant=\"custom-checkbox\" htmlFor=\"close\">\r\n                    closeButton\r\n                  </CLabel>\r\n                </CFormGroup>\r\n\r\n                <CButton\r\n                  className=\"mr-1 w-25\"\r\n                  color=\"success\"\r\n                  onClick={addToast}\r\n                >\r\n                  Add toast\r\n                </CButton>\r\n\r\n              </CForm>\r\n            </CCol>\r\n            <CCol sm=\"12\" lg=\"6\">\r\n              {Object.keys(toasters).map((toasterKey) => (\r\n                <CToaster\r\n                  position={toasterKey}\r\n                  key={'toaster' + toasterKey}\r\n                >\r\n                  {\r\n                    toasters[toasterKey].map((toast, key)=>{\r\n                    return(\r\n                      <CToast\r\n                        key={'toast' + key}\r\n                        show={true}\r\n                        autohide={toast.autohide}\r\n                        fade={toast.fade}\r\n                      >\r\n                        <CToastHeader closeButton={toast.closeButton}>\r\n                          Toast title\r\n                        </CToastHeader>\r\n                        <CToastBody>\r\n                          {`This is a toast in ${toasterKey} positioned toaster number ${key + 1}.`}\r\n                        </CToastBody>\r\n                      </CToast>\r\n                    )\r\n                  })\r\n                  }\r\n                </CToaster>\r\n              ))}\r\n            </CCol>\r\n          </CRow>\r\n        </CContainer>\r\n      </CCardBody>\r\n    </CCard>\r\n  )\r\n}\r\n\r\nexport default Toaster\r\n"],"sourceRoot":""}